{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to kal_utils","text":"<p>Kaleidoo utils package</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://BarLanderK.github.io/kal_utils</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"bucket/","title":"bucket module","text":""},{"location":"bucket/#kal_utils.bucket.copy_file","title":"<code>copy_file(bucket_name, source_file_path, destination_file_path, credentials_json=None)</code>","text":"<p>Copies a file from one location to another within the same Google Cloud Storage bucket.</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>The name of the bucket.</p> required <code>source_file_path</code> <code>str</code> <p>The full path to the source file.</p> required <code>destination_file_path</code> <code>str</code> <p>The full path to the destination file.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the file was copied successfully, False otherwise.</p> Source code in <code>kal_utils/bucket.py</code> <pre><code>def copy_file(bucket_name, source_file_path, destination_file_path, credentials_json = None):\n    \"\"\"\n        Copies a file from one location to another within the same Google Cloud Storage bucket.\n\n        Args:\n            bucket_name (str): The name of the bucket.\n            source_file_path (str): The full path to the source file.\n            destination_file_path (str): The full path to the destination file.\n\n        Returns:\n            bool: True if the file was copied successfully, False otherwise.\n    \"\"\"\n    try:\n        client = get_storage(credentials_json)\n        bucket = client.get_bucket(bucket_name)\n        source_blob = bucket.get_blob(source_file_path)\n\n        if not source_blob:\n            logger.info(f'Source file {source_file_path} not found in bucket {bucket_name}.')\n            return False\n\n        # Copy the source blob to the destination\n        bucket.copy_blob(source_blob, bucket, destination_file_path)\n        logger.info(f'File {source_file_path} copied to {destination_file_path}.')\n        return True\n    except Exception as e:\n        logger.error(f\"Error occurred while trying to copy file: {str(e)}\")\n        return False\n</code></pre>"},{"location":"bucket/#kal_utils.bucket.create_bucket","title":"<code>create_bucket(bucket_name, location='me-west1', storage_class='Standard', credentials_json=None)</code>","text":"<p>Creates a new bucket in Google Cloud Storage.</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>The name of the bucket to create.</p> required <code>location</code> <code>str</code> <p>The location where the bucket will be created. Defaults to 'US'.</p> <code>'me-west1'</code> <code>storage_class</code> <code>str</code> <p>The storage class of the bucket. Defaults to 'STANDARD'.</p> <code>'Standard'</code> <p>Returns:</p> Type Description <code>bucket (google.cloud.storage.bucket.Bucket)</code> <p>The created bucket object.</p> Source code in <code>kal_utils/bucket.py</code> <pre><code>def create_bucket(bucket_name, location = \"me-west1\" , storage_class = \"Standard\", credentials_json = None):\n    \"\"\"\n        Creates a new bucket in Google Cloud Storage.\n\n        Args:\n            bucket_name (str): The name of the bucket to create.\n            location (str, optional): The location where the bucket will be created. Defaults to 'US'.\n            storage_class (str, optional): The storage class of the bucket. Defaults to 'STANDARD'.\n\n        Returns:\n            bucket (google.cloud.storage.bucket.Bucket): The created bucket object.\n    \"\"\"\n    try:\n        client = get_storage(credentials_json)\n        all_chars = string.ascii_letters + string.digits\n        new_name = bucket_name\n        while client.lookup_bucket(new_name) is not None:\n            new_name += random.choice(all_chars)\n\n        bucket = client.bucket(new_name)\n        # Set the bucket's location and storage class\n        bucket.location = location\n        bucket.storage_class = storage_class\n\n        bucket = client.create_bucket(bucket)\n        logger.info(f'Bucket {new_name} created.')\n        return bucket\n    except Exception as e:\n        logger.error(f\"Error occurred while trying to create bucket: {str(e)}\")\n        return None\n</code></pre>"},{"location":"bucket/#kal_utils.bucket.delete_bucket","title":"<code>delete_bucket(bucket_name, credentials_json=None)</code>","text":"<p>Deletes a bucket in Google Cloud Storage.</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>The name of the bucket to delete.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the bucket was deleted successfully, False otherwise.</p> Source code in <code>kal_utils/bucket.py</code> <pre><code>def delete_bucket(bucket_name, credentials_json = None):\n    \"\"\"\n        Deletes a bucket in Google Cloud Storage.\n\n        Args:\n            bucket_name (str): The name of the bucket to delete.\n\n        Returns:\n            bool: True if the bucket was deleted successfully, False otherwise.\n    \"\"\"\n    try:\n        client = get_storage(credentials_json)\n        bucket = client.get_bucket(bucket_name)\n        bucket.delete()\n        logger.info(f'Bucket {bucket_name} deleted.')\n        return True\n    except Exception as e:\n        logger.error(f\"Error occurred while trying to delete bucket: {str(e)}\")\n        return False\n</code></pre>"},{"location":"bucket/#kal_utils.bucket.delete_file","title":"<code>delete_file(bucket_name, file_path, credentials_json=None)</code>","text":"<p>Deletes a file in Google Cloud Storage.</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>The name of the bucket.</p> required <code>file_path</code> <code>str</code> <p>The full path to the file, including folder(s) and file name.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the file was deleted successfully, False otherwise.</p> Source code in <code>kal_utils/bucket.py</code> <pre><code>def delete_file(bucket_name, file_path, credentials_json = None):\n    \"\"\"\n        Deletes a file in Google Cloud Storage.\n\n        Args:\n            bucket_name (str): The name of the bucket.\n            file_path (str): The full path to the file, including folder(s) and file name.\n\n        Returns:\n            bool: True if the file was deleted successfully, False otherwise.\n    \"\"\"\n    try:\n        client = get_storage(credentials_json)\n        bucket = client.get_bucket(bucket_name)\n\n        # Get the blob (file) object\n        blob = bucket.blob(file_path)\n\n        # Delete the file\n        blob.delete()\n\n        logger.info(f'File {file_path} deleted from bucket {bucket_name}.')\n        return True\n    except Exception as e:\n        logger.error(f\"Error occurred while trying to delete file: {str(e)}\")\n        return False\n</code></pre>"},{"location":"bucket/#kal_utils.bucket.delete_folder","title":"<code>delete_folder(bucket_name, folder_path, credentials_json=None)</code>","text":"<p>Deletes all files in a folder within a Google Cloud Storage bucket.</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>The name of the bucket.</p> required <code>folder_path</code> <code>str</code> <p>The path of the folder to delete.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the folder was deleted successfully, False otherwise.</p> Source code in <code>kal_utils/bucket.py</code> <pre><code>def delete_folder(bucket_name, folder_path, credentials_json = None):\n    \"\"\"\n        Deletes all files in a folder within a Google Cloud Storage bucket.\n\n        Args:\n            bucket_name (str): The name of the bucket.\n            folder_path (str): The path of the folder to delete.\n\n        Returns:\n            bool: True if the folder was deleted successfully, False otherwise.\n    \"\"\"\n    try:\n        client = get_storage(credentials_json)\n        bucket = client.get_bucket(bucket_name)\n\n        # List all files in the folder\n        blobs = list(bucket.list_blobs(prefix=folder_path))\n\n        # Delete each file in the folder\n        for blob in blobs:\n            blob.delete()\n            logger.info(f'File {blob.name} deleted.')\n\n        logger.info(f'All files in folder {folder_path} deleted from bucket {bucket_name}.')\n        return True\n    except Exception as e:\n        logger.error(f\"Error occurred while trying to delete folder: {str(e)}\")\n        return False\n</code></pre>"},{"location":"bucket/#kal_utils.bucket.generate_signed_url","title":"<code>generate_signed_url(bucket_name, file_path, expiration_time_minutes=60, credentials_json=None)</code>  <code>async</code>","text":"<p>Generates a signed URL for a file in Google Cloud Storage.</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>The name of the bucket.</p> required <code>file_path</code> <code>str</code> <p>The full path to the file, including folder(s) and file name.</p> required <code>expiration_time_minutes</code> <code>int</code> <p>The time in minutes before the URL expires. Defaults to 60 minutes.</p> <code>60</code> <p>Returns:</p> Type Description <code>str</code> <p>The signed URL if generated successfully, None otherwise.</p> Source code in <code>kal_utils/bucket.py</code> <pre><code>async def generate_signed_url(bucket_name, file_path, expiration_time_minutes=60, credentials_json = None):\n    \"\"\"\n        Generates a signed URL for a file in Google Cloud Storage.\n\n        Args:\n            bucket_name (str): The name of the bucket.\n            file_path (str): The full path to the file, including folder(s) and file name.\n            expiration_time_minutes (int): The time in minutes before the URL expires. Defaults to 60 minutes.\n\n        Returns:\n            str: The signed URL if generated successfully, None otherwise.\n    \"\"\"\n    try:\n        client = get_storage(credentials_json)\n        bucket = client.get_bucket(bucket_name)\n\n        # Get the blob (file) object\n        blob = bucket.blob(file_path)\n\n        # Generate a signed URL for the blob\n        url = blob.generate_signed_url(\n            version=\"v4\",\n            expiration=timedelta(minutes=expiration_time_minutes),\n            method=\"GET\"\n        )\n\n        return url\n    except Exception as e:\n        logger.error(f\"Error occurred while trying to generate signed url: {str(e)}\")\n        return None\n</code></pre>"},{"location":"bucket/#kal_utils.bucket.get_bucket_metadata","title":"<code>get_bucket_metadata(bucket_name, credentials_json=None)</code>","text":"<p>Retrieves metadata for a specific bucket in Google Cloud Storage.</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>The name of the bucket to retrieve metadata for.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary containing the bucket's metadata.</p> Source code in <code>kal_utils/bucket.py</code> <pre><code>def get_bucket_metadata(bucket_name, credentials_json = None):\n    \"\"\"\n        Retrieves metadata for a specific bucket in Google Cloud Storage.\n\n        Args:\n            bucket_name (str): The name of the bucket to retrieve metadata for.\n\n        Returns:\n            dict: A dictionary containing the bucket's metadata.\n    \"\"\"\n    try:\n        client = get_storage(credentials_json)\n        bucket = client.get_bucket(bucket_name)\n\n        # Retrieve metadata\n        metadata = {\n            'id': bucket.id,\n            'name': bucket.name,\n            'location': bucket.location,\n            'storage_class': bucket.storage_class,\n            'created': bucket.time_created,\n            'updated': bucket.updated,\n            'default_event_based_hold': bucket.default_event_based_hold,\n            'retention_period': bucket.retention_period,\n            'labels': bucket.labels,\n            'versioning_enabled': bucket.versioning_enabled,\n            'cors': bucket.cors,\n            'lifecycle_rules': bucket.lifecycle_rules,\n            'logging': bucket.logging,\n            'encryption': bucket.encryption,\n            'owner': bucket.owner,\n            'acl': bucket.acl,\n            'default_acl': bucket.default_object_acl,\n        }\n\n        return metadata\n    except Exception as e:\n        logger.error(f\"Error occurred while trying to get bucket metadata: {str(e)}\")\n        return {}\n</code></pre>"},{"location":"bucket/#kal_utils.bucket.get_file_metadata","title":"<code>get_file_metadata(bucket_name, file_path, credentials_json=None)</code>","text":"<p>Retrieves metadata for a specific file in Google Cloud Storage.</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>The name of the bucket.</p> required <code>file_path</code> <code>str</code> <p>The full path to the file to retrieve metadata for.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary containing the file's metadata.</p> Source code in <code>kal_utils/bucket.py</code> <pre><code>def get_file_metadata(bucket_name, file_path, credentials_json = None):\n    \"\"\"\n        Retrieves metadata for a specific file in Google Cloud Storage.\n\n        Args:\n            bucket_name (str): The name of the bucket.\n            file_path (str): The full path to the file to retrieve metadata for.\n\n        Returns:\n            dict: A dictionary containing the file's metadata.\n    \"\"\"\n    try:\n        client = get_storage(credentials_json)\n        bucket = client.get_bucket(bucket_name)\n\n        # Get the blob (file) object using the full file path\n        blob = bucket.get_blob(file_path)\n\n        if not blob:\n            logger.info(f'File {file_path} not found in bucket {bucket_name}.')\n            return {}\n\n        # Retrieve metadata\n        metadata = {\n            'name': blob.name,\n            'size': blob.size,\n            'content_type': blob.content_type,\n            'updated': blob.updated,\n            'generation': blob.generation,\n            'metageneration': blob.metageneration,\n            'md5_hash': blob.md5_hash,\n            'crc32c': blob.crc32c,\n            'etag': blob.etag,\n            'public_url':  blob.public_url\n        }\n\n\n        return metadata\n    except Exception as e:\n        logger.error(f\"Error occurred while trying to get file metadata: {str(e)}\")\n        return {}\n</code></pre>"},{"location":"bucket/#kal_utils.bucket.list_buckets","title":"<code>list_buckets(credentials_json=None)</code>","text":"<p>Lists all buckets in the Google Cloud Storage project.</p> <p>Returns:</p> Type Description <code>list</code> <p>A list of bucket names.</p> Source code in <code>kal_utils/bucket.py</code> <pre><code>def list_buckets(credentials_json = None):\n    \"\"\"\n        Lists all buckets in the Google Cloud Storage project.\n\n        Returns:\n            list: A list of bucket names.\n    \"\"\"\n    try:\n        client = get_storage(credentials_json)\n        buckets = client.list_buckets()\n\n        # Collect bucket names\n        bucket_names = [bucket.name for bucket in buckets]\n\n        return bucket_names\n    except Exception as e:\n        logger.error(f\"Error occurred while trying to list buckets: {str(e)}\")\n        return []\n</code></pre>"},{"location":"bucket/#kal_utils.bucket.list_files","title":"<code>list_files(bucket_name, prefix=None, credentials_json=None)</code>","text":"<p>Lists all files in a bucket or a specific folder in Google Cloud Storage.</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>The name of the bucket.</p> required <code>prefix</code> <code>str</code> <p>The prefix (folder path) to list files from. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>A list of file names in the specified bucket or folder.</p> Source code in <code>kal_utils/bucket.py</code> <pre><code>def list_files(bucket_name, prefix = None, credentials_json = None):\n    \"\"\"\n        Lists all files in a bucket or a specific folder in Google Cloud Storage.\n\n        Args:\n            bucket_name (str): The name of the bucket.\n            prefix (str, optional): The prefix (folder path) to list files from. Defaults to None.\n\n        Returns:\n            list: A list of file names in the specified bucket or folder.\n    \"\"\"\n    try:\n        client = get_storage(credentials_json)\n        bucket = client.get_bucket(bucket_name)\n        # List files in the bucket or a specific folder\n        blobs = bucket.list_blobs(prefix=prefix)\n        file_names = [blob.name for blob in blobs]\n        return file_names\n    except Exception as e:\n        logger.error(f\"Error occurred while trying to list files: {str(e)}\")\n        return []\n</code></pre>"},{"location":"bucket/#kal_utils.bucket.move_file","title":"<code>move_file(bucket_name, source_file_path, destination_file_path, credentials_json=None)</code>","text":"<p>Moves a file from one location to another within the same Google Cloud Storage bucket.</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>The name of the bucket.</p> required <code>source_file_path</code> <code>str</code> <p>The full path to the source file.</p> required <code>destination_file_path</code> <code>str</code> <p>The full path to the destination file.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the file was moved successfully, False otherwise.</p> Source code in <code>kal_utils/bucket.py</code> <pre><code>def move_file(bucket_name, source_file_path, destination_file_path, credentials_json = None):\n    \"\"\"\n        Moves a file from one location to another within the same Google Cloud Storage bucket.\n\n        Args:\n            bucket_name (str): The name of the bucket.\n            source_file_path (str): The full path to the source file.\n            destination_file_path (str): The full path to the destination file.\n\n        Returns:\n            bool: True if the file was moved successfully, False otherwise.\n    \"\"\"\n    try:\n        client = get_storage(credentials_json)\n        bucket = client.get_bucket(bucket_name)\n\n        # Get the blob (file) object for the source file\n        source_blob = bucket.get_blob(source_file_path)\n\n        if not source_blob:\n            logger.error(f'Source file {source_file_path} not found in bucket {bucket_name}.')\n            return False\n\n        # Copy the source blob to the destination\n        bucket.copy_blob(source_blob, bucket, destination_file_path)\n        logger.info(f'File {source_file_path} copied to {destination_file_path}.')\n        new_blob = bucket.get_blob(destination_file_path)\n\n        # Delete the original source blob\n        source_blob.delete()\n        logger.info(f'Source file {source_file_path} deleted.')\n\n        return True, new_blob.public_url\n    except Exception as e:\n        logger.error(f\"Error occurred while trying to move file: {str(e)}\")\n        return False, None\n</code></pre>"},{"location":"bucket/#kal_utils.bucket.move_folder","title":"<code>move_folder(bucket_name, source_folder, destination_folder, credentials_json=None)</code>","text":"<p>Moves all files from one folder to another within the same Google Cloud Storage bucket.</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>The name of the bucket.</p> required <code>source_folder</code> <code>str</code> <p>The path of the source folder.</p> required <code>destination_folder</code> <code>str</code> <p>The path of the destination folder.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the folder was moved successfully, False otherwise.</p> Source code in <code>kal_utils/bucket.py</code> <pre><code>def move_folder(bucket_name, source_folder, destination_folder, credentials_json = None):\n    \"\"\"\n        Moves all files from one folder to another within the same Google Cloud Storage bucket.\n\n        Args:\n            bucket_name (str): The name of the bucket.\n            source_folder (str): The path of the source folder.\n            destination_folder (str): The path of the destination folder.\n\n        Returns:\n            bool: True if the folder was moved successfully, False otherwise.\n    \"\"\"\n    try:\n        client = get_storage(credentials_json)\n        bucket = client.get_bucket(bucket_name)\n\n        # List all files in the source folder\n        blobs = list(bucket.list_blobs(prefix=source_folder))\n\n        # Copy each file to the destination folder and delete the original\n        for blob in blobs:\n            # Define the new destination path\n            new_blob_name = blob.name.replace(source_folder, destination_folder, 1)\n\n            # Copy the file\n            bucket.copy_blob(blob, bucket, new_blob_name)\n            logger.info(f'File {blob.name} copied to {new_blob_name}.')\n\n            # Delete the original file\n            blob.delete()\n            logger.info(f'File {blob.name} deleted from source folder.')\n\n        logger.info(f'All files moved from {source_folder} to {destination_folder} in bucket {bucket_name}.')\n        return True\n    except Exception as e:\n        logger.error(f\"Error occurred while trying to move folder: {str(e)}\")\n        return False\n</code></pre>"},{"location":"bucket/#kal_utils.bucket.rename_file","title":"<code>rename_file(bucket_name, source_file_folder, source_file_name, new_file_name, credentials_json=None)</code>","text":"<p>Renames a file in Google Cloud Storage by copying it to a new name and deleting the original.</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>The name of the bucket.</p> required <code>source_file_folder</code> <code>str</code> <p>The full path to the folder where the file allocated.</p> required <code>source_file_name</code> <code>str</code> <p>The current file name.</p> required <code>new_file_name</code> <code>str</code> <p>The new file name.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the file was renamed successfully, False otherwise.</p> Source code in <code>kal_utils/bucket.py</code> <pre><code>def rename_file(bucket_name, source_file_folder, source_file_name, new_file_name, credentials_json = None):\n    \"\"\"\n        Renames a file in Google Cloud Storage by copying it to a new name and deleting the original.\n\n        Args:\n            bucket_name (str): The name of the bucket.\n            source_file_folder (str): The full path to the folder where the file allocated.\n            source_file_name (str): The current file name.\n            new_file_name (str): The new file name.\n\n        Returns:\n            bool: True if the file was renamed successfully, False otherwise.\n    \"\"\"\n    try:\n        client = get_storage(credentials_json)\n        bucket = client.get_bucket(bucket_name)\n\n        # Get the blob (file) object for the source file\n        source_path = f\"{source_file_folder}/{source_file_name}\"\n        destination_path = f\"{source_file_folder}/{new_file_name}\"\n\n        source_blob = bucket.get_blob(source_path)\n        if not source_blob:\n            logger.error(f'Source file {source_path} not found in bucket {bucket_name}.')\n            return False\n\n            # Copy the source blob to the new path\n        bucket.copy_blob(source_blob, bucket, destination_path)\n        logger.info(f'File {source_path} copied to {destination_path}.')\n\n        # Delete the original source blob\n        source_blob.delete()\n        logger.info(f'Source file {source_path} deleted.')\n\n        return True\n    except Exception as e:\n        logger.error(f\"Error occurred while trying to rename file: {str(e)}\")\n        return False\n</code></pre>"},{"location":"bucket/#kal_utils.bucket.set_bucket_permissions","title":"<code>set_bucket_permissions(bucket_name, entity, role, credentials_json=None)</code>","text":"<p>Sets permissions for a bucket in Google Cloud Storage.</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>The name of the bucket.</p> required <code>entity</code> <code>str</code> <p>The entity to set permissions for (e.g., 'user-email@example.com', 'group-group@example.com').</p> required <code>role</code> <code>str</code> <p>The role to assign to the entity (e.g., 'OWNER', 'READER', 'WRITER').</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the permissions were set successfully, False otherwise.</p> Source code in <code>kal_utils/bucket.py</code> <pre><code>def set_bucket_permissions(bucket_name, entity, role, credentials_json = None):\n    \"\"\"\n        Sets permissions for a bucket in Google Cloud Storage.\n\n        Args:\n            bucket_name (str): The name of the bucket.\n            entity (str): The entity to set permissions for (e.g., 'user-email@example.com', 'group-group@example.com').\n            role (str): The role to assign to the entity (e.g., 'OWNER', 'READER', 'WRITER').\n\n        Returns:\n            bool: True if the permissions were set successfully, False otherwise.\n    \"\"\"\n    try:\n        client = get_storage(credentials_json)\n        bucket = client.get_bucket(bucket_name)\n\n        # Get the bucket's ACL\n        acl = bucket.acl\n\n        # Clear existing ACLs for the entity\n        acl.revoke_entity(entity)\n\n        # Add the new permission\n        acl.entity_from_dict({'entity': entity, 'role': role})\n\n        # Save the changes to the ACL\n        acl.save()\n\n        logger.info(f'Permissions for entity {entity} set to {role} on bucket {bucket_name}.')\n        return True\n    except Exception as e:\n        logger.error(f\"Error occurred while trying to set bucket permissions: {str(e)}\")\n        return False\n</code></pre>"},{"location":"bucket/#kal_utils.bucket.upload_to_bucket","title":"<code>upload_to_bucket(bucket_name, file_stream, destination_blob_name, credentials_json=None)</code>","text":"<p>Uploads a file to a bucket in Google Cloud Storage.</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>The name of the bucket.</p> required <code>file_stream</code> <code>BytesIO</code> <p>The byte stream of the file to upload.</p> required <code>destination_blob_name</code> <code>str</code> <p>The destination path and file name in the bucket.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the file was uploaded successfully, False otherwise.</p> Source code in <code>kal_utils/bucket.py</code> <pre><code>def upload_to_bucket(bucket_name, file_stream, destination_blob_name, credentials_json = None):\n    \"\"\"\n        Uploads a file to a bucket in Google Cloud Storage.\n\n        Args:\n            bucket_name (str): The name of the bucket.\n            file_stream (BytesIO): The byte stream of the file to upload.\n            destination_blob_name (str): The destination path and file name in the bucket.\n\n        Returns:\n            bool: True if the file was uploaded successfully, False otherwise.\n    \"\"\"\n    try:\n        client = get_storage(credentials_json)\n        bucket = client.get_bucket(bucket_name)\n\n        # Create a blob object for the destination\n        blob = bucket.blob(destination_blob_name)\n\n        # Upload the file to the destination\n        blob.upload_from_file(file_stream)\n\n        logger.info(f'File uploaded to {destination_blob_name} in bucket {bucket_name}.')\n        return True, blob.public_url\n    except Exception as e:\n        logger.error(f\"Error occurred while trying to upload to bucket: {str(e)}\")\n        return False, None\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v104-date","title":"v1.0.4 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/BarLanderK/kal-utils/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>kal-utils could always use more documentation, whether as part of the official kal-utils docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/BarLanderK/kal-utils/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up kal-utils for local development.</p> <ol> <li> <p>Fork the kal-utils repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/kal-utils.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv kal-utils\n$ cd kal-utils/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 kal-utils tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/BarLanderK/kal-utils/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"handle_response/","title":"handle_response module","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install kal-utils, run this command in your terminal:</p> <pre><code>pip install kal-utils\n</code></pre> <p>This is the preferred method to install kal-utils, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install kal-utils from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/BarLanderK/kal-utils\n</code></pre>"},{"location":"kal_utils/","title":"kal_utils module","text":"<p>Main module.</p>"},{"location":"logger/","title":"logger module","text":""},{"location":"logger/#kal_utils.logger.JsonFormatter","title":"<code> JsonFormatter            (Formatter)         </code>","text":"Source code in <code>kal_utils/logger.py</code> <pre><code>class JsonFormatter(logging.Formatter):\n    def format(self, record):\n        log_message = {\n            \"time\": self.formatTime(record, self.datefmt),\n            \"name\": record.name,\n            \"level\": record.levelname,\n            \"message\": record.getMessage()\n        }\n        return json.dumps(log_message)\n</code></pre>"},{"location":"logger/#kal_utils.logger.JsonFormatter.format","title":"<code>format(self, record)</code>","text":"<p>Format the specified record as text.</p> <p>The record's attribute dictionary is used as the operand to a string formatting operation which yields the returned string. Before formatting the dictionary, a couple of preparatory steps are carried out. The message attribute of the record is computed using LogRecord.getMessage(). If the formatting string uses the time (as determined by a call to usesTime(), formatTime() is called to format the event time. If there is exception information, it is formatted using formatException() and appended to the message.</p> Source code in <code>kal_utils/logger.py</code> <pre><code>def format(self, record):\n    log_message = {\n        \"time\": self.formatTime(record, self.datefmt),\n        \"name\": record.name,\n        \"level\": record.levelname,\n        \"message\": record.getMessage()\n    }\n    return json.dumps(log_message)\n</code></pre>"},{"location":"mongodb/","title":"mongodb module","text":""},{"location":"requests/","title":"requests module","text":""},{"location":"sorst/","title":"sorts module","text":""},{"location":"time_zone/","title":"time_zone module","text":""},{"location":"usage/","title":"Usage","text":"<p>To use kal-utils in a project:</p> <pre><code>import kal_utils\n</code></pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre>"}]}